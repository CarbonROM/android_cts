/*
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <OMX_Component.h>
#include <binder/IServiceManager.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>

using namespace android;

template <class T>
static void InitOMXParams(T *params) {
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

int main() {
  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mps = interface_cast<IMediaPlayerService>(binder);

  if (mps == NULL) {
    ALOGI("get media player service failed");
    return EXIT_FAILURE;
  }

  const char *codecName = "OMX.google.mpeg4.encoder";
  // connect to IOMX each time
  sp<IOMX> service = mps->getOMX();

  IOMX::node_id node = 0;

  sp<DummyOMXObserver> observer = new DummyOMXObserver();
  status_t err = service->allocateNode(codecName, observer, NULL, &node);
  if (err != OK) {
    ALOGI("%s node allocation fails", codecName);
    return EXIT_FAILURE;
  }

  // get buffer parameters
  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);
  def.nPortIndex = 0;
  def.nBufferCountActual = 0;
  def.nBufferSize = INT_MAX;

  err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                              sizeof(def));
  if (err != OK) {
    ALOGE("port 0: %u buffers of size %u", def.nBufferCountActual,
          def.nBufferSize);
    return EXIT_FAILURE;
  }

  sleep(1);
  return EXIT_SUCCESS;
}
