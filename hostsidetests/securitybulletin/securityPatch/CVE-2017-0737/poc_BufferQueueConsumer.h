/*
 * Copyright 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <EGL/egl.h>
#include <EGL/eglext.h>

#include <gui/BufferQueueDefs.h>
#include <gui/IGraphicBufferConsumer.h>
#include "poc_OccupancyTracker.h"

namespace android {

class BufferQueueCore;

class EvilBufferQueueConsumer : public BnGraphicBufferConsumer {
 public:
  EvilBufferQueueConsumer(const sp<BufferQueueCore>& core);
  virtual ~EvilBufferQueueConsumer();

  virtual status_t acquireBuffer(BufferItem* outBuffer, nsecs_t expectedPresent,
                                 uint64_t maxFrameNumber = 0) override;

  virtual status_t detachBuffer(int slot);

  virtual status_t attachBuffer(int* slot, const sp<GraphicBuffer>& buffer);

  virtual status_t releaseBuffer(int slot, uint64_t frameNumber,
                                 const sp<Fence>& releaseFence,
                                 EGLDisplay display, EGLSyncKHR fence);

  virtual status_t connect(const sp<IConsumerListener>& consumerListener,
                           bool controlledByApp);

  virtual status_t disconnect();

  virtual status_t getReleasedBuffers(uint64_t* outSlotMask);

  virtual status_t setDefaultBufferSize(uint32_t width, uint32_t height);

  virtual status_t setMaxBufferCount(int bufferCount);

  virtual status_t setMaxAcquiredBufferCount(int maxAcquiredBuffers);

  virtual void setConsumerName(const String8& name);

  virtual status_t setDefaultBufferFormat(PixelFormat defaultFormat);

  virtual status_t setDefaultBufferDataSpace(
      android_dataspace defaultDataSpace);

  virtual status_t setConsumerUsageBits(uint32_t usage);

  virtual status_t setTransformHint(uint32_t hint);

  virtual sp<NativeHandle> getSidebandStream() const;

  virtual status_t getOccupancyHistory(
      bool forceFlush,
      std::vector<OccupancyTracker::Segment>* outHistory);

  virtual status_t discardFreeBuffers() override;

  #pragma clang diagnostic ignored "-Woverloaded-virtual"
  virtual void dump(String8& result, const char* prefix) const;


  virtual status_t releaseBuffer(int buf, uint64_t frameNumber,
                                 EGLDisplay display, EGLSyncKHR fence,
                                 const sp<Fence>& releaseFence) {
    return releaseBuffer(buf, frameNumber, releaseFence, display, fence);
  }

  virtual status_t consumerConnect(const sp<IConsumerListener>& consumer,
                                   bool controlledByApp) {
    return connect(consumer, controlledByApp);
  }

  virtual status_t consumerDisconnect() { return disconnect(); }


 private:
  sp<BufferQueueCore> mCore;

  BufferQueueDefs::SlotsType& mSlots;

  String8 mConsumerName;

};

}
