/*
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <proxy_resolver_v8.h>
#include <fstream>
#include "../includes/common.h"

android::String16 url("");
android::String16 host("");

class MyErrorListener : public net::ProxyErrorListener {
 public:
    virtual void AlertMessage(android::String16 alert __attribute__((unused))) {
    }
    virtual void ErrorMessage(android::String16 error __attribute__((unused))) {
    }
};

void poc(char* raw) {
    android::String16 script(raw);
    net::ProxyResolverJSBindings *bindings =
            net::ProxyResolverJSBindings::CreateDefault();
    MyErrorListener errorListener;
    net::ProxyResolverV8 resolver(bindings, &errorListener);
    android::String16 results;
    resolver.SetPacScript(script);
    resolver.GetProxyForURL(url, host, &results);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        return EXIT_FAILURE;
    }

    std::ifstream stream;
    stream.open(argv[1]);
    if (stream.rdstate() != std::ifstream::goodbit) {
        return EXIT_FAILURE;
    }

    stream.seekg(0, std::ios::end);
    size_t size = stream.tellg();
    char* raw = (char*) calloc(size + 1, sizeof(char));
    stream.seekg(0);
    stream.read(raw, size);

    time_t currentTime = start_timer();
    while (timer_active(currentTime)) {
        poc(raw);
    }
    free(raw);
    return EXIT_SUCCESS;
}
