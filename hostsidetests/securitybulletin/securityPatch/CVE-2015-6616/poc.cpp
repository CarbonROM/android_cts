/**
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <dlfcn.h>
#include <sys/types.h>
#include <media/DataSource.h>
#include <media/stagefright/FileSource.h>
#include <media/MediaExtractor.h>
#include <media/IMediaExtractor.h>
#include <media/DataSourceBase.h>
#include <media/stagefright/MetaData.h>
#include "common.h"
#define LIBNAME "/system/lib64/extractors/libmp4extractor.so"

void * operator new(size_t size) {
    if (size > 64 * 1024 * 1024) {
        exit (EXIT_VULNERABLE);
    }
    return malloc(size);
}

using namespace android;

int main(int argc, char **argv) {
    MediaExtractor::GetExtractorDef getDef = nullptr;
    if (argc < 2) {
        return EXIT_SUCCESS;
    }

    void *libHandle = dlopen(LIBNAME, RTLD_NOW | RTLD_LOCAL);
    if (!libHandle) {
        return EXIT_SUCCESS;
    }

    getDef = (MediaExtractor::GetExtractorDef)dlsym(libHandle, "GETEXTRACTORDEF");
    if (!getDef) {
        dlclose(libHandle);
        return EXIT_SUCCESS;
    }

    sp < DataSource > dataSource = new FileSource(argv[1]);
    if (dataSource == nullptr) {
        dlclose(libHandle);
        return EXIT_SUCCESS;
    }

    void *meta = nullptr;
    MediaExtractor::CreatorFunc creator = NULL;
    MediaExtractor::FreeMetaFunc freeMeta = nullptr;
    float confidence;
    creator = getDef().sniff(dataSource.get(), &confidence, &meta, &freeMeta);
    if (!creator) {
        dlclose(libHandle);
        return EXIT_SUCCESS;
    }

    MediaExtractor *ret = creator(dataSource.get(), meta);
    if (ret == nullptr) {
        dlclose(libHandle);
        return EXIT_SUCCESS;
    }

    if (meta != nullptr && freeMeta != nullptr) {
        freeMeta(meta);
    }

    MediaTrack* source = ret->getTrack(0);
    if (source == nullptr) {
        dlclose(libHandle);
        return EXIT_SUCCESS;
    }

    source->start(NULL);

    dlclose(libHandle);
    return EXIT_SUCCESS;
}
