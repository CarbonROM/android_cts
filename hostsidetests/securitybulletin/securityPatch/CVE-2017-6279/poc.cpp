/**
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions vand
 * limitations under the License.
 */

#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include "OMX_Component.h"

using namespace android;

template <class T>
static void InitOMXParams(T *params) {
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

struct DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

struct DeathRecipient : public IBinder::DeathRecipient {
  DeathRecipient() : mDied(false) {}
  bool mDied;
  virtual void binderDied(const wp<IBinder> &) { mDied = true; }
  bool died() const { return mDied; }
};

extern bool connectOMX(sp<IOMX> &omx) {
  sp<IBinder> binder;
  sp<IServiceManager> sm = defaultServiceManager();

  binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> service = interface_cast<IMediaPlayerService>(binder);
  if (binder == NULL) {
    ALOGE("cannot get the media player service");
    return false;
  }

  omx = service->getOMX();
  if (omx == NULL) {
    ALOGE("cannot get the OMX interface");
    return false;
  }
  return true;
}

IOMX::buffer_id *inBufferId = nullptr;
IOMX::buffer_id *outBufferId = nullptr;

static int exit_test(int ret_code) {
  if (inBufferId != nullptr) {
    delete[] inBufferId;
  }
  if (outBufferId != nullptr) {
    delete[] outBufferId;
  }
  return ret_code;
}



int main() {
  sp<IOMX> service;
  if (connectOMX(service) == false) {
    ALOGE("failed in connectOMX");
    return EXIT_FAILURE;
  }

  IOMX::node_id node = 0;
  sp<DummyOMXObserver> observer = new DummyOMXObserver();
  const char *codecName = "OMX.Nvidia.aac.decoder";
  status_t err = service->allocateNode(codecName, observer, nullptr, &node);
  if (err != OK) {
    ALOGE("failed in service allocate node");
    return EXIT_FAILURE;
  }

  err = service->sendCommand(node, OMX_CommandStateSet, 2);
  if (err != OK) {
    ALOGE("failed in service sendCommand");
    return EXIT_FAILURE;
  }

  // get input port parameters
  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);
  def.nPortIndex = 0;
  OMX_INDEXTYPE omx_indextype = OMX_IndexParamPortDefinition;
  err = service->getParameter(node, omx_indextype, &def, sizeof(def));
  if (err != OK) {
    ALOGE("port 0: %u buffers of size %u", def.nBufferCountActual,
          def.nBufferSize);
    return EXIT_FAILURE;
  }

  int inMemSize = def.nBufferCountActual * def.nBufferSize;
  int inBufferCnt = def.nBufferCountActual;
  int inBufferSize = inMemSize / inBufferCnt;
  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];

  // get output port parameters
  InitOMXParams(&def);
  def.nPortIndex = 1;
  err = service->getParameter(node, omx_indextype, &def, sizeof(def));
  if (err != OK) {
    ALOGE("port 1: %u buffers of size %u", def.nBufferCountActual,
          def.nBufferSize);
    exit_test(EXIT_FAILURE);
  }

  // prepare output port buffers
  int outMemSize = def.nBufferCountActual * def.nBufferSize;
  int outBufferCnt = def.nBufferCountActual;
  int outBufferSize = outMemSize / outBufferCnt;
  sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);
  IOMX::buffer_id *outBufferId = new IOMX::buffer_id[outBufferCnt];

  int byte_array[] = {0, 104, 0, 0, 0};
  for (int i = 0; i < inBufferCnt; i++) {
    sp<IMemory> memory = dealerIn->allocate(inBufferSize);
    memset(memory->pointer(), byte_array[i], inBufferSize);
    err = service->useBuffer(node, 0, memory, &inBufferId[i], inBufferSize);
    if (err != OK) {
      ALOGE("failed in service useBuffer");
      exit_test(EXIT_FAILURE);
    }
  }
  for (int i = 0; i < outBufferCnt; i++) {
    sp<IMemory> memory = dealerOut->allocate(outBufferSize);
    memset(memory->pointer(), 0xcd, outBufferSize);
    err = service->allocateBufferWithBackup(node, 1, memory, &outBufferId[i],
                                            outBufferSize);
    if (err != OK) {
      ALOGE("failed in service allocateBufferWithBackup");
      exit_test(EXIT_FAILURE);
    }
  }

  // change state from idle to executing
  err = service->sendCommand(node, OMX_CommandStateSet, 3);
  if (err != OK) {
    ALOGE("failed in service sendCommand");
    exit_test(EXIT_FAILURE);
  }

  sleep(1);
  int fenceFd = -1;
  for (int i = 0; i < inBufferCnt; i++) {
    err = service->emptyBuffer(node, inBufferId[i], 0, inBufferSize, 0, 0,
                               fenceFd);
    if (err != OK) {
      ALOGE("emptyBuffer, inBufferId[%d], err%d", i, err);
      exit_test(EXIT_FAILURE);
    }
  }

  for (int i = 0; i < outBufferCnt; i++) {
    err = service->fillBuffer(node, outBufferId[i], fenceFd);
    if (err != OK) {
      ALOGE("fillBuffer, err: %d", err);
      exit_test(EXIT_FAILURE);
    }
  }

  service->freeNode(node);

  exit_test(EXIT_SUCCESS);
}
