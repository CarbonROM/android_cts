/**
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions vand
 * limitations under the License.
 */

#include <OMX_Component.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>

using namespace android;

class DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}
  virtual void onMessages(const std::list<omx_message> &) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

template <class T>
static void InitOMXParams(T *params) {
  memset(params, 0, sizeof(T));
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

static bool connectOMX(sp<IOMX> &omx) {
  sp<IServiceManager> sm = defaultServiceManager();

  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    return false;
  }

  omx = mediaPlayerService->getOMX();
  if (omx == NULL) {
    return false;
  }

  return true;
}

int main() {
  const char *codecName = "OMX.Nvidia.render.crt.overlay.argb8888";

  sp<IOMX> service;
  if (connectOMX(service) == false) {
    ALOGE("connectOMX failed");
    return EXIT_FAILURE;
  }

  IOMX::node_id node = 0;
  sp<DummyOMXObserver> observer = new DummyOMXObserver();

  status_t err = service->allocateNode(codecName, observer, NULL, &node);
  if (err != OK) {
    ALOGE("%s node allocation fails", codecName);
    return EXIT_FAILURE;
  }

  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);
  def.nPortIndex = 0;
  err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                              sizeof(def));
  if (err != OK) {
    ALOGE("port 0: %u buffers of size %u", def.nBufferCountActual,
          def.nBufferSize);
    return EXIT_FAILURE;
  }

  int inMemSize = def.nBufferCountActual * def.nBufferSize;
  int inBufferCnt = def.nBufferCountActual;

  def.nPortIndex = 1;
  err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                              sizeof(def));
  if (err != OK) {
    ALOGE("port 1: %u buffers of size %u", def.nBufferCountActual,
          def.nBufferSize);
    return EXIT_FAILURE;
  }

  int outMemSize = def.nBufferCountActual * def.nBufferSize;
  int outBufferCnt = def.nBufferCountActual;

  int inBufferSize = inMemSize / inBufferCnt;
  int outBufferSize = outMemSize / outBufferCnt;

  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);

  IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];
  for (int i = 0; i < inBufferCnt; i++) {
    sp<IMemory> memory = dealerIn->allocate(inBufferSize);
    memset(memory->pointer(), 0xCF, inBufferSize);

    err = service->useBuffer(node, 0, memory, &inBufferId[i],
                             inBufferSize /*allottedSize*/);
    if (err != OK) {
      ALOGE("useBuffer, port index 0, err: %d, num: %d", err, i);
      delete[] inBufferId;
      return EXIT_FAILURE;
    }
  }

  IOMX::buffer_id *outBufferId = new IOMX::buffer_id[outBufferCnt];
  for (int i = 0; i < outBufferCnt; i++) {
    sp<IMemory> memory = dealerOut->allocate(outBufferSize);
    err = service->useBuffer(node, 1, memory, &outBufferId[i], outBufferSize);
    if (err != OK) {
      ALOGE("useBuffer, port index 1, err: %d, num: %d", err, i);
      delete[] inBufferId;
      delete[] outBufferId;
      return EXIT_FAILURE;
    }
  }

  // change state from loaded to idle
  err = service->sendCommand(node, OMX_CommandStateSet, 2);
  if (err != OK) {
    ALOGE("sendCommand, err: %d", err);
    delete[] inBufferId;
    delete[] outBufferId;
    return EXIT_FAILURE;
  }

  // change state from idle to executing
  err = service->sendCommand(node, OMX_CommandStateSet, 3);
  if (err != OK) {
    ALOGE("sendCommand, err: %d", err);
    delete[] inBufferId;
    delete[] outBufferId;
    return EXIT_FAILURE;
  }

  int fenceFd = -1;
  for (int i = 0; i < inBufferCnt; i++) {
    err = service->emptyBuffer(node, inBufferId[i], 0, inBufferSize, 0, 0,
                               fenceFd);
    if (err != OK) {
      ALOGE("emptyBuffer, err: %d", err);
      delete[] inBufferId;
      delete[] outBufferId;
      return EXIT_FAILURE;
    }
  }

  delete[] inBufferId;
  delete[] outBufferId;
  return EXIT_SUCCESS;
}
