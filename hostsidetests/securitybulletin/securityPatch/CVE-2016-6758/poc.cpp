/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
#include <OMX_Component.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <jni.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <media/OMXBuffer.h>

using namespace android;

template <class T> static void InitOMXParams(T *params) {
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

struct DummyOMXObserver : public BnOMXObserver {
public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

protected:
  virtual ~DummyOMXObserver() {}
};

static bool connectOMX(sp<IOMX> &omx) {
  sp<IServiceManager> sm = defaultServiceManager();

  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    ALOGE("cannot get the media player service");
    return false;
  }

  omx = mediaPlayerService->getOMX();
  if (omx == NULL) {
    ALOGE("cannot get the OMX  interface");
    return false;
  }

  return true;
}

int main() {
  const char *codecName = "OMX.qcom.video.decoder.avc.secure";

  // connect to IOMX each time
  sp<IOMX> service;
  if (!connectOMX(service)) {
    return EXIT_FAILURE;
  }

  sp<IOMXNode> mOMXNode;

  sp<DummyOMXObserver> observer = new DummyOMXObserver();

  status_t err = service->allocateNode(codecName, observer, &mOMXNode);
  if (err != OK) {
    ALOGE("%s node allocation fails", codecName);
    return EXIT_FAILURE;
  }

  // get buffer parameters
  OMX_PARAM_PORTDEFINITIONTYPE def;
  InitOMXParams(&def);
  def.nPortIndex = 0;
  err = mOMXNode->getParameter(OMX_IndexParamPortDefinition, &def, sizeof(def));
  if (err != OK) {
      return EXIT_FAILURE;
  }
  ALOGI("port 0: %u buffers of size %u", def.nBufferCountActual,
        def.nBufferSize);

  // use buffer
  int inBufferCnt = def.nBufferCountActual;

  IOMX::buffer_id *inBufferId = new IOMX::buffer_id[inBufferCnt];

  InitOMXParams(&def);
  def.nPortIndex = 1;
  err = mOMXNode->getParameter(OMX_IndexParamPortDefinition, &def, sizeof(def));
  if (err != OK) {
      return EXIT_FAILURE;
  }
  ALOGI("port 1: %u buffers of size %u", def.nBufferCountActual,
        def.nBufferSize);

  int outBufferCnt = def.nBufferCountActual;

  IOMX::buffer_id *outBufferId = new IOMX::buffer_id[outBufferCnt];

  for (int i = 0; i < inBufferCnt; i++) {
    OMXBuffer omxBuf;
    err = mOMXNode->useBuffer(0, omxBuf, &inBufferId[i]);
    if (err != OK) {
      return EXIT_FAILURE;
    }
    ALOGI("useBuffer, port index 0, err: %d", err);
  }

  for (int i = 0; i < outBufferCnt; i++) {
    OMXBuffer omxBuf;
    err = mOMXNode->useBuffer(1, omxBuf, &outBufferId[i]);
    if (err != OK) {
      return EXIT_FAILURE;
    }
    ALOGI("useBuffer, port index 1, err: %d, num: %d", err, i);
  }

  // change state from loaded to idle
  err = mOMXNode->sendCommand(OMX_CommandStateSet, 2);
  if (err != OK) {
      return EXIT_FAILURE;
  }
  ALOGI("sendCommand, err: %d", err);

  // change state from idle to executing
  err = mOMXNode->sendCommand(OMX_CommandStateSet, 3);
  if (err != OK) {
      return EXIT_FAILURE;
  }
  ALOGI("sendCommand, err: %d", err);
  OMXBuffer omxBuf;
  err = mOMXNode->emptyBuffer(inBufferId[0], omxBuf, 0, 0, 0);
  if (err != OK) {
      return EXIT_FAILURE;
  }
  ALOGI("emptyBuffer, err: %d", err);

  // free buffer
  err = mOMXNode->freeNode();
  if (err != OK) {
      return EXIT_FAILURE;
  }
  ALOGI("freeNode, err: %d", err);

  sleep(1); // wait to check death
  return EXIT_FAILURE;
}
