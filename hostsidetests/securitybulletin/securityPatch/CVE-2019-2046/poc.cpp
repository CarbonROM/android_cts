/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <proxy_resolver_js_bindings.h>
#include <proxy_resolver_v8.h>
#include <sys/types.h>
#include <utils/String16.h>
#include <utils/String8.h>
#include "../includes/common.h"

#include <fstream>
#include <iostream>

#define TIMEOUT_IN_MILLISECONDS 5 * 60 * 1000

android::String16 url("");
android::String16 host("");

class MyErrorListener : public net::ProxyErrorListener {
 public:
    virtual void AlertMessage(android::String16 alert) {
        (void)alert;
    }

    virtual void ErrorMessage(android::String16 error) {
        (void)error;
    }
};

int main(int argc, char *argv[]) {
    if (argc != 2) {
        return EXIT_FAILURE;
    }
    net::ProxyResolverJSBindings *bindings =
            net::ProxyResolverJSBindings::CreateDefault();
    MyErrorListener errorListener;
    net::ProxyResolverV8 resolver(bindings, &errorListener);
    android::String16 results;

    std::ifstream file;
    file.open(argv[1]);
    if (file.rdstate() != std::ifstream::goodbit) {
        return EXIT_FAILURE;
    }

    file.seekg(0, std::ios::end);
    size_t size = file.tellg();
    char* raw = (char*) calloc(size + 1, sizeof(char));
    if (!raw) {
        return EXIT_FAILURE;
    }
    file.seekg(0);
    file.read(raw, size);
    file.close();
    android::String16 script(raw);

    resolver.SetPacScript(script);
    time_t currentTime = start_timer();
    while (timer_active(currentTime)) {
        resolver.GetProxyForURL(url, host, &results);
    }
    free(raw);

    return EXIT_SUCCESS;
}
