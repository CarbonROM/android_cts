/**
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "../includes/omxUtils.h"
#include "../includes/common.h"
#define FRAME_WIDTH 11
#define FRAME_HEIGHT 10000

extern bool mUseTreble;
extern int numCallbackEmptyBufferDone;

sp<IAllocator> mAllocator = IAllocator::getService("ashmem");
int allocateHidlPortBuffers(OMX_U32 portIndex, Vector<Buffer> *buffers) {
    buffers->clear();
    OMX_PARAM_PORTDEFINITIONTYPE def;
    int err = omxUtilsGetParameter(portIndex, &def);
    omxExitOnError(err);
    for (OMX_U32 i = 0; i < def.nBufferCountActual; ++i) {
        Buffer buffer;
        buffer.mFlags = 0;
        bool success;
        auto transStatus = mAllocator->allocate(def.nBufferSize,
                                                [&success, &buffer](
                                                        bool s,
                                                        hidl_memory const& m) {
                                                    success = s;
                                                    buffer.mHidlMemory = m;
                                                });
        omxExitOnError(!transStatus.isOk());
        omxExitOnError(!success);
        omxUtilsUseBuffer(portIndex, buffer.mHidlMemory, &buffer.mID);
        buffers->push(buffer);
    }
    return OK;
}

int main() {
    /* Initialize OMX for the specified codec                                 */
    status_t ret = omxUtilsInit((char *) "OMX.google.vp8.encoder");
    omxExitOnError(ret);
    int allCallbacksReceivedEmptyBufferDone = 0;
    /* Get OMX input port parameters                                          */
    OMX_PARAM_PORTDEFINITIONTYPE *params =
            (OMX_PARAM_PORTDEFINITIONTYPE *) malloc(
                    sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
    memset(params, 0, sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
    omxUtilsGetParameter(OMX_UTILS_IP_PORT, params);
    params->format.video.nFrameWidth = FRAME_WIDTH;
    params->format.video.nFrameHeight = FRAME_HEIGHT;
    omxUtilsSetParameter(OMX_UTILS_IP_PORT, params);
    omxUtilsGetParameter(OMX_UTILS_IP_PORT, params);
    int inMemSize = params->nBufferCountActual * params->nBufferSize;
    int inBufferCnt = params->nBufferCountActual;
    int inBufferSize = inMemSize / inBufferCnt;
    /* Get OMX output port parameters                                         */
    memset(params, 0, sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
    omxUtilsGetParameter(OMX_UTILS_OP_PORT, params);
    int outMemSize = params->nBufferCountActual * params->nBufferSize;
    int outBufferCnt = params->nBufferCountActual;
    int outBufferSize = outMemSize / outBufferCnt;
    Vector < Buffer > inputBuffers;
    Vector < Buffer > outputBuffers;
    /* Register input buffers with OMX component                              */
    if (mUseTreble) {
        allocateHidlPortBuffers(OMX_UTILS_IP_PORT, &inputBuffers);
    } else {
        sp < MemoryDealer > dealerIn = new MemoryDealer(inMemSize);
        for (int i = 0; i < inBufferCnt; ++i) {
            Buffer buffer;
            buffer.mFlags = 0;
            buffer.mMemory = dealerIn->allocate(inBufferSize);
            omxUtilsUseBuffer(OMX_UTILS_IP_PORT, buffer.mMemory, &buffer.mID);
            inputBuffers.push(buffer);
        }
    }
    /* Register output buffers with OMX component                             */
    if (mUseTreble) {
        allocateHidlPortBuffers(OMX_UTILS_OP_PORT, &outputBuffers);
    } else {
        sp < MemoryDealer > dealerOut = new MemoryDealer(outMemSize);
        for (int i = 0; i < outBufferCnt; ++i) {
            Buffer buffer;
            buffer.mFlags = 0;
            buffer.mMemory = dealerOut->allocate(outBufferSize);
            omxUtilsUseBuffer(OMX_UTILS_OP_PORT, buffer.mMemory, &buffer.mID);
            outputBuffers.push(buffer);
        }
    }
    /* Do OMX State change to Idle                                            */
    omxUtilsSendCommand(OMX_CommandStateSet, OMX_StateIdle);
    /* Do OMX State change to Executing                                       */
    omxUtilsSendCommand(OMX_CommandStateSet, OMX_StateExecuting);
    for (int i = 0; i < inBufferCnt; ++i) {
        OMXBuffer omxBuf(0, inBufferSize);
        omxUtilsEmptyBuffer(inputBuffers[i].mID, omxBuf, 0, 0, -1);
    }
    for (int i = 0; i < outBufferCnt; ++i) {
        OMXBuffer omxBuf(0, outBufferSize);
        omxUtilsFillBuffer(outputBuffers[i].mID, omxBuf, -1);
    }
    time_t timer = start_timer();
    while (timer_active(timer)) {
        if (numCallbackEmptyBufferDone == inBufferCnt) {
            allCallbacksReceivedEmptyBufferDone = 1;
            break;
        }
    }
    if(!allCallbacksReceivedEmptyBufferDone){
        ALOGE("Exiting the app");
        exit (EXIT_FAILURE);
    }
    /* Do OMX State change to Idle                                            */
    omxUtilsSendCommand(OMX_CommandStateSet, OMX_StateIdle);
    /* Do OMX State change to Loaded                                          */
    omxUtilsSendCommand(OMX_CommandStateSet, OMX_StateLoaded);
    /* Free input and output buffers                                          */
    for (int i = 0; i < inBufferCnt; ++i) {
        omxUtilsFreeBuffer(OMX_UTILS_IP_PORT, inputBuffers[i].mID);
    }
    for (int i = 0; i < outBufferCnt; ++i) {
        omxUtilsFreeBuffer(OMX_UTILS_OP_PORT, outputBuffers[i].mID);
    }
    omxUtilsFreeNode();
    return EXIT_SUCCESS;
}
