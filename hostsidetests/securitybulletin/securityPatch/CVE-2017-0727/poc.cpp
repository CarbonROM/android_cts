/**
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <binder/IServiceManager.h>
#include <binder/ProcessState.h>
#include <gui/BufferQueue.h>
#include <gui/IProducerListener.h>
#include <media/IMediaPlayerService.h>
#include <media/IOMX.h>

#include "../includes/common.h"

using namespace android;

time_t test_started;

static void *start2(void *args) {
  void **pair = (void **)args;
  sp<IGraphicBufferProducer> bufferProducer =
      *(sp<IGraphicBufferProducer> *)pair[0];
  sp<IGraphicBufferConsumer> bufferConsumer =
      *(sp<IGraphicBufferConsumer> *)pair[1];
  while (timer_active(test_started)) {
    int slot = BufferQueue::INVALID_BUFFER_SLOT;
    sp<Fence> fence;
    bufferProducer->dequeueBuffer(&slot, &fence, 0, 0, 0, 0);
    sp<GraphicBuffer> firstBuffer;
    bufferProducer->requestBuffer(slot, &firstBuffer);
    IGraphicBufferProducer::QueueBufferInput input(
        0ull, true, HAL_DATASPACE_UNKNOWN, Rect::INVALID_RECT,
        NATIVE_WINDOW_SCALING_MODE_FREEZE, 0, Fence::NO_FENCE);
    IGraphicBufferProducer::QueueBufferOutput output;
    bufferProducer->queueBuffer(slot, input, &output);

    BufferItem item;
    bufferConsumer->acquireBuffer(&item, 0);
    bufferConsumer->releaseBuffer(item.mSlot, item.mFrameNumber, EGL_NO_DISPLAY,
                                  EGL_NO_SYNC_KHR, Fence::NO_FENCE);

    sp<GraphicBuffer> returnedBuffer;
    sp<Fence> returnedFence;
    float transform[16];
    bufferProducer->getLastQueuedBuffer(&returnedBuffer, &returnedFence,
                                        transform);
  }
  return NULL;
}

struct DummyConsumer : public BnConsumerListener {
  virtual void onFrameAvailable(const BufferItem & /* item */) {}
  virtual void onBuffersReleased() {}
  virtual void onSidebandStreamChanged() {}
};

int main() {
  sp<IServiceManager> sm = defaultServiceManager();
  sp<IBinder> binder = sm->getService(String16("media.player"));
  sp<IMediaPlayerService> service = interface_cast<IMediaPlayerService>(binder);
  sp<IOMX> omx = service->getOMX();
  sp<IGraphicBufferProducer> bufferProducer = NULL;
  sp<IGraphicBufferConsumer> bufferConsumer = NULL;
  status_t status =
      omx->createPersistentInputSurface(&bufferProducer, &bufferConsumer);
  if (status != OK) {
    return EXIT_FAILURE;
  }

  sp<DummyConsumer> dc(new DummyConsumer);
  bufferConsumer->consumerConnect(dc, false);
  IGraphicBufferProducer::QueueBufferOutput output;
  bufferProducer->connect(new DummyProducerListener, NATIVE_WINDOW_API_CPU,
                          false, &output);
  void *pair[2] = {&bufferProducer, &bufferConsumer};
  pthread_t thread;
  test_started = start_timer();
  pthread_create(&thread, NULL, start2, pair);

  pthread_join(thread, NULL);

  while (timer_active(test_started)) {
    int slot = BufferQueue::INVALID_BUFFER_SLOT;
    sp<Fence> fence;
    bufferProducer->dequeueBuffer(&slot, &fence, 0, 0, 0, 0);
    sp<GraphicBuffer> firstBuffer;
    bufferProducer->requestBuffer(slot, &firstBuffer);
    IGraphicBufferProducer::QueueBufferInput input(
        0ull, true, HAL_DATASPACE_UNKNOWN, Rect::INVALID_RECT,
        NATIVE_WINDOW_SCALING_MODE_FREEZE, 0, Fence::NO_FENCE);
    bufferProducer->queueBuffer(slot, input, &output);

    BufferItem item;
    bufferConsumer->acquireBuffer(&item, 0);
    bufferConsumer->releaseBuffer(item.mSlot, item.mFrameNumber, EGL_NO_DISPLAY,
                                  EGL_NO_SYNC_KHR, Fence::NO_FENCE);

    sp<GraphicBuffer> returnedBuffer;
    sp<Fence> returnedFence;
    float transform[16];
    bufferProducer->getLastQueuedBuffer(&returnedBuffer, &returnedFence,
                                        transform);
  }

  return EXIT_SUCCESS;
}
